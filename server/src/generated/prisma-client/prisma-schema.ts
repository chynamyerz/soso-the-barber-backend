// Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `
  type AggregateBooking {
    count: Int!
  }

  type AggregateCut {
    count: Int!
  }

  type AggregateGallery {
    count: Int!
  }

  type AggregateSlot {
    count: Int!
  }

  type AggregateUser {
    count: Int!
  }

  type BatchPayload {
    count: Long!
  }

  type Booking {
    id: ID!
    cut: Cut
    slot: Slot!
    user: User!
    status: BookingStatus!
    updatedAt: DateTime
    createdAt: DateTime
  }

  type BookingConnection {
    pageInfo: PageInfo!
    edges: [BookingEdge]!
    aggregate: AggregateBooking!
  }

  input BookingCreateInput {
    id: ID
    cut: CutCreateOneInput
    slot: SlotCreateOneInput!
    user: UserCreateOneWithoutBookingsInput!
    status: BookingStatus!
  }

  input BookingCreateManyWithoutUserInput {
    create: [BookingCreateWithoutUserInput!]
    connect: [BookingWhereUniqueInput!]
  }

  input BookingCreateWithoutUserInput {
    id: ID
    cut: CutCreateOneInput
    slot: SlotCreateOneInput!
    status: BookingStatus!
  }

  type BookingEdge {
    node: Booking!
    cursor: String!
  }

  enum BookingOrderByInput {
    id_ASC
    id_DESC
    status_ASC
    status_DESC
    updatedAt_ASC
    updatedAt_DESC
    createdAt_ASC
    createdAt_DESC
  }

  type BookingPreviousValues {
    id: ID!
    status: BookingStatus!
    updatedAt: DateTime
    createdAt: DateTime
  }

  input BookingScalarWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    status: BookingStatus
    status_not: BookingStatus
    status_in: [BookingStatus!]
    status_not_in: [BookingStatus!]
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime!]
    createdAt_not_in: [DateTime!]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    AND: [BookingScalarWhereInput!]
    OR: [BookingScalarWhereInput!]
    NOT: [BookingScalarWhereInput!]
  }

  enum BookingStatus {
    BOOKED
    CANCELLED
  }

  type BookingSubscriptionPayload {
    mutation: MutationType!
    node: Booking
    updatedFields: [String!]
    previousValues: BookingPreviousValues
  }

  input BookingSubscriptionWhereInput {
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: BookingWhereInput
    AND: [BookingSubscriptionWhereInput!]
    OR: [BookingSubscriptionWhereInput!]
    NOT: [BookingSubscriptionWhereInput!]
  }

  input BookingUpdateInput {
    cut: CutUpdateOneInput
    slot: SlotUpdateOneRequiredInput
    user: UserUpdateOneRequiredWithoutBookingsInput
    status: BookingStatus
  }

  input BookingUpdateManyDataInput {
    status: BookingStatus
  }

  input BookingUpdateManyMutationInput {
    status: BookingStatus
  }

  input BookingUpdateManyWithoutUserInput {
    create: [BookingCreateWithoutUserInput!]
    delete: [BookingWhereUniqueInput!]
    connect: [BookingWhereUniqueInput!]
    set: [BookingWhereUniqueInput!]
    disconnect: [BookingWhereUniqueInput!]
    update: [BookingUpdateWithWhereUniqueWithoutUserInput!]
    upsert: [BookingUpsertWithWhereUniqueWithoutUserInput!]
    deleteMany: [BookingScalarWhereInput!]
    updateMany: [BookingUpdateManyWithWhereNestedInput!]
  }

  input BookingUpdateManyWithWhereNestedInput {
    where: BookingScalarWhereInput!
    data: BookingUpdateManyDataInput!
  }

  input BookingUpdateWithoutUserDataInput {
    cut: CutUpdateOneInput
    slot: SlotUpdateOneRequiredInput
    status: BookingStatus
  }

  input BookingUpdateWithWhereUniqueWithoutUserInput {
    where: BookingWhereUniqueInput!
    data: BookingUpdateWithoutUserDataInput!
  }

  input BookingUpsertWithWhereUniqueWithoutUserInput {
    where: BookingWhereUniqueInput!
    update: BookingUpdateWithoutUserDataInput!
    create: BookingCreateWithoutUserInput!
  }

  input BookingWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    cut: CutWhereInput
    slot: SlotWhereInput
    user: UserWhereInput
    status: BookingStatus
    status_not: BookingStatus
    status_in: [BookingStatus!]
    status_not_in: [BookingStatus!]
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime!]
    createdAt_not_in: [DateTime!]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    AND: [BookingWhereInput!]
    OR: [BookingWhereInput!]
    NOT: [BookingWhereInput!]
  }

  input BookingWhereUniqueInput {
    id: ID
  }

  type Cut {
    id: ID!
    title: String!
    description: String!
    image: String!
    price: Int!
    updatedAt: DateTime
    createdAt: DateTime
  }

  type CutConnection {
    pageInfo: PageInfo!
    edges: [CutEdge]!
    aggregate: AggregateCut!
  }

  input CutCreateInput {
    id: ID
    title: String!
    description: String!
    image: String!
    price: Int!
  }

  input CutCreateOneInput {
    create: CutCreateInput
    connect: CutWhereUniqueInput
  }

  type CutEdge {
    node: Cut!
    cursor: String!
  }

  enum CutOrderByInput {
    id_ASC
    id_DESC
    title_ASC
    title_DESC
    description_ASC
    description_DESC
    image_ASC
    image_DESC
    price_ASC
    price_DESC
    updatedAt_ASC
    updatedAt_DESC
    createdAt_ASC
    createdAt_DESC
  }

  type CutPreviousValues {
    id: ID!
    title: String!
    description: String!
    image: String!
    price: Int!
    updatedAt: DateTime
    createdAt: DateTime
  }

  type CutSubscriptionPayload {
    mutation: MutationType!
    node: Cut
    updatedFields: [String!]
    previousValues: CutPreviousValues
  }

  input CutSubscriptionWhereInput {
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: CutWhereInput
    AND: [CutSubscriptionWhereInput!]
    OR: [CutSubscriptionWhereInput!]
    NOT: [CutSubscriptionWhereInput!]
  }

  input CutUpdateDataInput {
    title: String
    description: String
    image: String
    price: Int
  }

  input CutUpdateInput {
    title: String
    description: String
    image: String
    price: Int
  }

  input CutUpdateManyMutationInput {
    title: String
    description: String
    image: String
    price: Int
  }

  input CutUpdateOneInput {
    create: CutCreateInput
    update: CutUpdateDataInput
    upsert: CutUpsertNestedInput
    delete: Boolean
    disconnect: Boolean
    connect: CutWhereUniqueInput
  }

  input CutUpsertNestedInput {
    update: CutUpdateDataInput!
    create: CutCreateInput!
  }

  input CutWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    title: String
    title_not: String
    title_in: [String!]
    title_not_in: [String!]
    title_lt: String
    title_lte: String
    title_gt: String
    title_gte: String
    title_contains: String
    title_not_contains: String
    title_starts_with: String
    title_not_starts_with: String
    title_ends_with: String
    title_not_ends_with: String
    description: String
    description_not: String
    description_in: [String!]
    description_not_in: [String!]
    description_lt: String
    description_lte: String
    description_gt: String
    description_gte: String
    description_contains: String
    description_not_contains: String
    description_starts_with: String
    description_not_starts_with: String
    description_ends_with: String
    description_not_ends_with: String
    image: String
    image_not: String
    image_in: [String!]
    image_not_in: [String!]
    image_lt: String
    image_lte: String
    image_gt: String
    image_gte: String
    image_contains: String
    image_not_contains: String
    image_starts_with: String
    image_not_starts_with: String
    image_ends_with: String
    image_not_ends_with: String
    price: Int
    price_not: Int
    price_in: [Int!]
    price_not_in: [Int!]
    price_lt: Int
    price_lte: Int
    price_gt: Int
    price_gte: Int
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime!]
    createdAt_not_in: [DateTime!]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    AND: [CutWhereInput!]
    OR: [CutWhereInput!]
    NOT: [CutWhereInput!]
  }

  input CutWhereUniqueInput {
    id: ID
  }

  scalar DateTime

  type Gallery {
    id: ID!
    imageUrl: String
    updatedAt: DateTime
    createdAt: DateTime
  }

  type GalleryConnection {
    pageInfo: PageInfo!
    edges: [GalleryEdge]!
    aggregate: AggregateGallery!
  }

  input GalleryCreateInput {
    id: ID
    imageUrl: String
  }

  type GalleryEdge {
    node: Gallery!
    cursor: String!
  }

  enum GalleryOrderByInput {
    id_ASC
    id_DESC
    imageUrl_ASC
    imageUrl_DESC
    updatedAt_ASC
    updatedAt_DESC
    createdAt_ASC
    createdAt_DESC
  }

  type GalleryPreviousValues {
    id: ID!
    imageUrl: String
    updatedAt: DateTime
    createdAt: DateTime
  }

  type GallerySubscriptionPayload {
    mutation: MutationType!
    node: Gallery
    updatedFields: [String!]
    previousValues: GalleryPreviousValues
  }

  input GallerySubscriptionWhereInput {
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: GalleryWhereInput
    AND: [GallerySubscriptionWhereInput!]
    OR: [GallerySubscriptionWhereInput!]
    NOT: [GallerySubscriptionWhereInput!]
  }

  input GalleryUpdateInput {
    imageUrl: String
  }

  input GalleryUpdateManyMutationInput {
    imageUrl: String
  }

  input GalleryWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    imageUrl: String
    imageUrl_not: String
    imageUrl_in: [String!]
    imageUrl_not_in: [String!]
    imageUrl_lt: String
    imageUrl_lte: String
    imageUrl_gt: String
    imageUrl_gte: String
    imageUrl_contains: String
    imageUrl_not_contains: String
    imageUrl_starts_with: String
    imageUrl_not_starts_with: String
    imageUrl_ends_with: String
    imageUrl_not_ends_with: String
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime!]
    createdAt_not_in: [DateTime!]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    AND: [GalleryWhereInput!]
    OR: [GalleryWhereInput!]
    NOT: [GalleryWhereInput!]
  }

  input GalleryWhereUniqueInput {
    id: ID
  }

  scalar Long

  type Mutation {
    createBooking(data: BookingCreateInput!): Booking!
    updateBooking(
      data: BookingUpdateInput!
      where: BookingWhereUniqueInput!
    ): Booking
    updateManyBookings(
      data: BookingUpdateManyMutationInput!
      where: BookingWhereInput
    ): BatchPayload!
    upsertBooking(
      where: BookingWhereUniqueInput!
      create: BookingCreateInput!
      update: BookingUpdateInput!
    ): Booking!
    deleteBooking(where: BookingWhereUniqueInput!): Booking
    deleteManyBookings(where: BookingWhereInput): BatchPayload!
    createCut(data: CutCreateInput!): Cut!
    updateCut(data: CutUpdateInput!, where: CutWhereUniqueInput!): Cut
    updateManyCuts(
      data: CutUpdateManyMutationInput!
      where: CutWhereInput
    ): BatchPayload!
    upsertCut(
      where: CutWhereUniqueInput!
      create: CutCreateInput!
      update: CutUpdateInput!
    ): Cut!
    deleteCut(where: CutWhereUniqueInput!): Cut
    deleteManyCuts(where: CutWhereInput): BatchPayload!
    createGallery(data: GalleryCreateInput!): Gallery!
    updateGallery(
      data: GalleryUpdateInput!
      where: GalleryWhereUniqueInput!
    ): Gallery
    updateManyGalleries(
      data: GalleryUpdateManyMutationInput!
      where: GalleryWhereInput
    ): BatchPayload!
    upsertGallery(
      where: GalleryWhereUniqueInput!
      create: GalleryCreateInput!
      update: GalleryUpdateInput!
    ): Gallery!
    deleteGallery(where: GalleryWhereUniqueInput!): Gallery
    deleteManyGalleries(where: GalleryWhereInput): BatchPayload!
    createSlot(data: SlotCreateInput!): Slot!
    updateSlot(data: SlotUpdateInput!, where: SlotWhereUniqueInput!): Slot
    updateManySlots(
      data: SlotUpdateManyMutationInput!
      where: SlotWhereInput
    ): BatchPayload!
    upsertSlot(
      where: SlotWhereUniqueInput!
      create: SlotCreateInput!
      update: SlotUpdateInput!
    ): Slot!
    deleteSlot(where: SlotWhereUniqueInput!): Slot
    deleteManySlots(where: SlotWhereInput): BatchPayload!
    createUser(data: UserCreateInput!): User!
    updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
    updateManyUsers(
      data: UserUpdateManyMutationInput!
      where: UserWhereInput
    ): BatchPayload!
    upsertUser(
      where: UserWhereUniqueInput!
      create: UserCreateInput!
      update: UserUpdateInput!
    ): User!
    deleteUser(where: UserWhereUniqueInput!): User
    deleteManyUsers(where: UserWhereInput): BatchPayload!
  }

  enum MutationType {
    CREATED
    UPDATED
    DELETED
  }

  interface Node {
    id: ID!
  }

  type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
  }

  type Query {
    booking(where: BookingWhereUniqueInput!): Booking
    bookings(
      where: BookingWhereInput
      orderBy: BookingOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [Booking]!
    bookingsConnection(
      where: BookingWhereInput
      orderBy: BookingOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): BookingConnection!
    cut(where: CutWhereUniqueInput!): Cut
    cuts(
      where: CutWhereInput
      orderBy: CutOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [Cut]!
    cutsConnection(
      where: CutWhereInput
      orderBy: CutOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): CutConnection!
    gallery(where: GalleryWhereUniqueInput!): Gallery
    galleries(
      where: GalleryWhereInput
      orderBy: GalleryOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [Gallery]!
    galleriesConnection(
      where: GalleryWhereInput
      orderBy: GalleryOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): GalleryConnection!
    slot(where: SlotWhereUniqueInput!): Slot
    slots(
      where: SlotWhereInput
      orderBy: SlotOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [Slot]!
    slotsConnection(
      where: SlotWhereInput
      orderBy: SlotOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): SlotConnection!
    user(where: UserWhereUniqueInput!): User
    users(
      where: UserWhereInput
      orderBy: UserOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [User]!
    usersConnection(
      where: UserWhereInput
      orderBy: UserOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): UserConnection!
    node(id: ID!): Node
  }

  enum Role {
    ADMIN
  }

  type Slot {
    id: ID!
    day: String!
    time: String!
    status: SlotStaus!
    updatedAt: DateTime
    createdAt: DateTime
  }

  type SlotConnection {
    pageInfo: PageInfo!
    edges: [SlotEdge]!
    aggregate: AggregateSlot!
  }

  input SlotCreateInput {
    id: ID
    day: String!
    time: String!
    status: SlotStaus!
  }

  input SlotCreateOneInput {
    create: SlotCreateInput
    connect: SlotWhereUniqueInput
  }

  type SlotEdge {
    node: Slot!
    cursor: String!
  }

  enum SlotOrderByInput {
    id_ASC
    id_DESC
    day_ASC
    day_DESC
    time_ASC
    time_DESC
    status_ASC
    status_DESC
    updatedAt_ASC
    updatedAt_DESC
    createdAt_ASC
    createdAt_DESC
  }

  type SlotPreviousValues {
    id: ID!
    day: String!
    time: String!
    status: SlotStaus!
    updatedAt: DateTime
    createdAt: DateTime
  }

  enum SlotStaus {
    ACTIVE
    INACTIVE
  }

  type SlotSubscriptionPayload {
    mutation: MutationType!
    node: Slot
    updatedFields: [String!]
    previousValues: SlotPreviousValues
  }

  input SlotSubscriptionWhereInput {
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: SlotWhereInput
    AND: [SlotSubscriptionWhereInput!]
    OR: [SlotSubscriptionWhereInput!]
    NOT: [SlotSubscriptionWhereInput!]
  }

  input SlotUpdateDataInput {
    day: String
    time: String
    status: SlotStaus
  }

  input SlotUpdateInput {
    day: String
    time: String
    status: SlotStaus
  }

  input SlotUpdateManyMutationInput {
    day: String
    time: String
    status: SlotStaus
  }

  input SlotUpdateOneRequiredInput {
    create: SlotCreateInput
    update: SlotUpdateDataInput
    upsert: SlotUpsertNestedInput
    connect: SlotWhereUniqueInput
  }

  input SlotUpsertNestedInput {
    update: SlotUpdateDataInput!
    create: SlotCreateInput!
  }

  input SlotWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    day: String
    day_not: String
    day_in: [String!]
    day_not_in: [String!]
    day_lt: String
    day_lte: String
    day_gt: String
    day_gte: String
    day_contains: String
    day_not_contains: String
    day_starts_with: String
    day_not_starts_with: String
    day_ends_with: String
    day_not_ends_with: String
    time: String
    time_not: String
    time_in: [String!]
    time_not_in: [String!]
    time_lt: String
    time_lte: String
    time_gt: String
    time_gte: String
    time_contains: String
    time_not_contains: String
    time_starts_with: String
    time_not_starts_with: String
    time_ends_with: String
    time_not_ends_with: String
    status: SlotStaus
    status_not: SlotStaus
    status_in: [SlotStaus!]
    status_not_in: [SlotStaus!]
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime!]
    createdAt_not_in: [DateTime!]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    AND: [SlotWhereInput!]
    OR: [SlotWhereInput!]
    NOT: [SlotWhereInput!]
  }

  input SlotWhereUniqueInput {
    id: ID
  }

  type Subscription {
    booking(where: BookingSubscriptionWhereInput): BookingSubscriptionPayload
    cut(where: CutSubscriptionWhereInput): CutSubscriptionPayload
    gallery(where: GallerySubscriptionWhereInput): GallerySubscriptionPayload
    slot(where: SlotSubscriptionWhereInput): SlotSubscriptionPayload
    user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  }

  type User {
    id: ID!
    cell: String!
    email: String!
    image: String
    name: String!
    password: String!
    bookings(
      where: BookingWhereInput
      orderBy: BookingOrderByInput
      skip: Int
      after: String
      before: String
      first: Int
      last: Int
    ): [Booking!]
    oneTimePin: String
    resetTokenExpiry: DateTime
    role: Role
    streetAddress: String
    updatedAt: DateTime
    createdAt: DateTime
  }

  type UserConnection {
    pageInfo: PageInfo!
    edges: [UserEdge]!
    aggregate: AggregateUser!
  }

  input UserCreateInput {
    id: ID
    cell: String!
    email: String!
    image: String
    name: String!
    password: String!
    bookings: BookingCreateManyWithoutUserInput
    oneTimePin: String
    resetTokenExpiry: DateTime
    role: Role
    streetAddress: String
  }

  input UserCreateOneWithoutBookingsInput {
    create: UserCreateWithoutBookingsInput
    connect: UserWhereUniqueInput
  }

  input UserCreateWithoutBookingsInput {
    id: ID
    cell: String!
    email: String!
    image: String
    name: String!
    password: String!
    oneTimePin: String
    resetTokenExpiry: DateTime
    role: Role
    streetAddress: String
  }

  type UserEdge {
    node: User!
    cursor: String!
  }

  enum UserOrderByInput {
    id_ASC
    id_DESC
    cell_ASC
    cell_DESC
    email_ASC
    email_DESC
    image_ASC
    image_DESC
    name_ASC
    name_DESC
    password_ASC
    password_DESC
    oneTimePin_ASC
    oneTimePin_DESC
    resetTokenExpiry_ASC
    resetTokenExpiry_DESC
    role_ASC
    role_DESC
    streetAddress_ASC
    streetAddress_DESC
    updatedAt_ASC
    updatedAt_DESC
    createdAt_ASC
    createdAt_DESC
  }

  type UserPreviousValues {
    id: ID!
    cell: String!
    email: String!
    image: String
    name: String!
    password: String!
    oneTimePin: String
    resetTokenExpiry: DateTime
    role: Role
    streetAddress: String
    updatedAt: DateTime
    createdAt: DateTime
  }

  type UserSubscriptionPayload {
    mutation: MutationType!
    node: User
    updatedFields: [String!]
    previousValues: UserPreviousValues
  }

  input UserSubscriptionWhereInput {
    mutation_in: [MutationType!]
    updatedFields_contains: String
    updatedFields_contains_every: [String!]
    updatedFields_contains_some: [String!]
    node: UserWhereInput
    AND: [UserSubscriptionWhereInput!]
    OR: [UserSubscriptionWhereInput!]
    NOT: [UserSubscriptionWhereInput!]
  }

  input UserUpdateInput {
    cell: String
    email: String
    image: String
    name: String
    password: String
    bookings: BookingUpdateManyWithoutUserInput
    oneTimePin: String
    resetTokenExpiry: DateTime
    role: Role
    streetAddress: String
  }

  input UserUpdateManyMutationInput {
    cell: String
    email: String
    image: String
    name: String
    password: String
    oneTimePin: String
    resetTokenExpiry: DateTime
    role: Role
    streetAddress: String
  }

  input UserUpdateOneRequiredWithoutBookingsInput {
    create: UserCreateWithoutBookingsInput
    update: UserUpdateWithoutBookingsDataInput
    upsert: UserUpsertWithoutBookingsInput
    connect: UserWhereUniqueInput
  }

  input UserUpdateWithoutBookingsDataInput {
    cell: String
    email: String
    image: String
    name: String
    password: String
    oneTimePin: String
    resetTokenExpiry: DateTime
    role: Role
    streetAddress: String
  }

  input UserUpsertWithoutBookingsInput {
    update: UserUpdateWithoutBookingsDataInput!
    create: UserCreateWithoutBookingsInput!
  }

  input UserWhereInput {
    id: ID
    id_not: ID
    id_in: [ID!]
    id_not_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_gt: ID
    id_gte: ID
    id_contains: ID
    id_not_contains: ID
    id_starts_with: ID
    id_not_starts_with: ID
    id_ends_with: ID
    id_not_ends_with: ID
    cell: String
    cell_not: String
    cell_in: [String!]
    cell_not_in: [String!]
    cell_lt: String
    cell_lte: String
    cell_gt: String
    cell_gte: String
    cell_contains: String
    cell_not_contains: String
    cell_starts_with: String
    cell_not_starts_with: String
    cell_ends_with: String
    cell_not_ends_with: String
    email: String
    email_not: String
    email_in: [String!]
    email_not_in: [String!]
    email_lt: String
    email_lte: String
    email_gt: String
    email_gte: String
    email_contains: String
    email_not_contains: String
    email_starts_with: String
    email_not_starts_with: String
    email_ends_with: String
    email_not_ends_with: String
    image: String
    image_not: String
    image_in: [String!]
    image_not_in: [String!]
    image_lt: String
    image_lte: String
    image_gt: String
    image_gte: String
    image_contains: String
    image_not_contains: String
    image_starts_with: String
    image_not_starts_with: String
    image_ends_with: String
    image_not_ends_with: String
    name: String
    name_not: String
    name_in: [String!]
    name_not_in: [String!]
    name_lt: String
    name_lte: String
    name_gt: String
    name_gte: String
    name_contains: String
    name_not_contains: String
    name_starts_with: String
    name_not_starts_with: String
    name_ends_with: String
    name_not_ends_with: String
    password: String
    password_not: String
    password_in: [String!]
    password_not_in: [String!]
    password_lt: String
    password_lte: String
    password_gt: String
    password_gte: String
    password_contains: String
    password_not_contains: String
    password_starts_with: String
    password_not_starts_with: String
    password_ends_with: String
    password_not_ends_with: String
    bookings_every: BookingWhereInput
    bookings_some: BookingWhereInput
    bookings_none: BookingWhereInput
    oneTimePin: String
    oneTimePin_not: String
    oneTimePin_in: [String!]
    oneTimePin_not_in: [String!]
    oneTimePin_lt: String
    oneTimePin_lte: String
    oneTimePin_gt: String
    oneTimePin_gte: String
    oneTimePin_contains: String
    oneTimePin_not_contains: String
    oneTimePin_starts_with: String
    oneTimePin_not_starts_with: String
    oneTimePin_ends_with: String
    oneTimePin_not_ends_with: String
    resetTokenExpiry: DateTime
    resetTokenExpiry_not: DateTime
    resetTokenExpiry_in: [DateTime!]
    resetTokenExpiry_not_in: [DateTime!]
    resetTokenExpiry_lt: DateTime
    resetTokenExpiry_lte: DateTime
    resetTokenExpiry_gt: DateTime
    resetTokenExpiry_gte: DateTime
    role: Role
    role_not: Role
    role_in: [Role!]
    role_not_in: [Role!]
    streetAddress: String
    streetAddress_not: String
    streetAddress_in: [String!]
    streetAddress_not_in: [String!]
    streetAddress_lt: String
    streetAddress_lte: String
    streetAddress_gt: String
    streetAddress_gte: String
    streetAddress_contains: String
    streetAddress_not_contains: String
    streetAddress_starts_with: String
    streetAddress_not_starts_with: String
    streetAddress_ends_with: String
    streetAddress_not_ends_with: String
    updatedAt: DateTime
    updatedAt_not: DateTime
    updatedAt_in: [DateTime!]
    updatedAt_not_in: [DateTime!]
    updatedAt_lt: DateTime
    updatedAt_lte: DateTime
    updatedAt_gt: DateTime
    updatedAt_gte: DateTime
    createdAt: DateTime
    createdAt_not: DateTime
    createdAt_in: [DateTime!]
    createdAt_not_in: [DateTime!]
    createdAt_lt: DateTime
    createdAt_lte: DateTime
    createdAt_gt: DateTime
    createdAt_gte: DateTime
    AND: [UserWhereInput!]
    OR: [UserWhereInput!]
    NOT: [UserWhereInput!]
  }

  input UserWhereUniqueInput {
    id: ID
    email: String
  }
`;
